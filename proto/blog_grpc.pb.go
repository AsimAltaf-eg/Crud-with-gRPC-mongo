// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/blog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Blog_Service_CreateBlog_FullMethodName  = "/blog.Blog_Service/CreateBlog"
	Blog_Service_CreateBlogs_FullMethodName = "/blog.Blog_Service/CreateBlogs"
	Blog_Service_ReadBlog_FullMethodName    = "/blog.Blog_Service/ReadBlog"
	Blog_Service_UpdateBlog_FullMethodName  = "/blog.Blog_Service/UpdateBlog"
	Blog_Service_DeleteBlog_FullMethodName  = "/blog.Blog_Service/DeleteBlog"
	Blog_Service_ListBlog_FullMethodName    = "/blog.Blog_Service/ListBlog"
)

// Blog_ServiceClient is the client API for Blog_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Blog_ServiceClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogReq, opts ...grpc.CallOption) (*CreateBlogRes, error)
	CreateBlogs(ctx context.Context, in *CreateBlogsReq, opts ...grpc.CallOption) (*CreateBlogsRes, error)
	ReadBlog(ctx context.Context, in *ReadBlogReq, opts ...grpc.CallOption) (*ReadBlogRes, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogReq, opts ...grpc.CallOption) (*UpdateBlogRes, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogRes, error)
	ListBlog(ctx context.Context, in *ListBlogReq, opts ...grpc.CallOption) (Blog_Service_ListBlogClient, error)
}

type blog_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlog_ServiceClient(cc grpc.ClientConnInterface) Blog_ServiceClient {
	return &blog_ServiceClient{cc}
}

func (c *blog_ServiceClient) CreateBlog(ctx context.Context, in *CreateBlogReq, opts ...grpc.CallOption) (*CreateBlogRes, error) {
	out := new(CreateBlogRes)
	err := c.cc.Invoke(ctx, Blog_Service_CreateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) CreateBlogs(ctx context.Context, in *CreateBlogsReq, opts ...grpc.CallOption) (*CreateBlogsRes, error) {
	out := new(CreateBlogsRes)
	err := c.cc.Invoke(ctx, Blog_Service_CreateBlogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) ReadBlog(ctx context.Context, in *ReadBlogReq, opts ...grpc.CallOption) (*ReadBlogRes, error) {
	out := new(ReadBlogRes)
	err := c.cc.Invoke(ctx, Blog_Service_ReadBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) UpdateBlog(ctx context.Context, in *UpdateBlogReq, opts ...grpc.CallOption) (*UpdateBlogRes, error) {
	out := new(UpdateBlogRes)
	err := c.cc.Invoke(ctx, Blog_Service_UpdateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) DeleteBlog(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogRes, error) {
	out := new(DeleteBlogRes)
	err := c.cc.Invoke(ctx, Blog_Service_DeleteBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) ListBlog(ctx context.Context, in *ListBlogReq, opts ...grpc.CallOption) (Blog_Service_ListBlogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blog_Service_ServiceDesc.Streams[0], Blog_Service_ListBlog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blog_ServiceListBlogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blog_Service_ListBlogClient interface {
	Recv() (*ListBlogRes, error)
	grpc.ClientStream
}

type blog_ServiceListBlogClient struct {
	grpc.ClientStream
}

func (x *blog_ServiceListBlogClient) Recv() (*ListBlogRes, error) {
	m := new(ListBlogRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Blog_ServiceServer is the server API for Blog_Service service.
// All implementations must embed UnimplementedBlog_ServiceServer
// for forward compatibility
type Blog_ServiceServer interface {
	CreateBlog(context.Context, *CreateBlogReq) (*CreateBlogRes, error)
	CreateBlogs(context.Context, *CreateBlogsReq) (*CreateBlogsRes, error)
	ReadBlog(context.Context, *ReadBlogReq) (*ReadBlogRes, error)
	UpdateBlog(context.Context, *UpdateBlogReq) (*UpdateBlogRes, error)
	DeleteBlog(context.Context, *DeleteBlogReq) (*DeleteBlogRes, error)
	ListBlog(*ListBlogReq, Blog_Service_ListBlogServer) error
	mustEmbedUnimplementedBlog_ServiceServer()
}

// UnimplementedBlog_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlog_ServiceServer struct {
}

func (UnimplementedBlog_ServiceServer) CreateBlog(context.Context, *CreateBlogReq) (*CreateBlogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlog_ServiceServer) CreateBlogs(context.Context, *CreateBlogsReq) (*CreateBlogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogs not implemented")
}
func (UnimplementedBlog_ServiceServer) ReadBlog(context.Context, *ReadBlogReq) (*ReadBlogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlog not implemented")
}
func (UnimplementedBlog_ServiceServer) UpdateBlog(context.Context, *UpdateBlogReq) (*UpdateBlogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBlog_ServiceServer) DeleteBlog(context.Context, *DeleteBlogReq) (*DeleteBlogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlog_ServiceServer) ListBlog(*ListBlogReq, Blog_Service_ListBlogServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBlog not implemented")
}
func (UnimplementedBlog_ServiceServer) mustEmbedUnimplementedBlog_ServiceServer() {}

// UnsafeBlog_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Blog_ServiceServer will
// result in compilation errors.
type UnsafeBlog_ServiceServer interface {
	mustEmbedUnimplementedBlog_ServiceServer()
}

func RegisterBlog_ServiceServer(s grpc.ServiceRegistrar, srv Blog_ServiceServer) {
	s.RegisterService(&Blog_Service_ServiceDesc, srv)
}

func _Blog_Service_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_Service_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).CreateBlog(ctx, req.(*CreateBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_CreateBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).CreateBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_Service_CreateBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).CreateBlogs(ctx, req.(*CreateBlogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_ReadBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).ReadBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_Service_ReadBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).ReadBlog(ctx, req.(*ReadBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_Service_UpdateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).UpdateBlog(ctx, req.(*UpdateBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_Service_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).DeleteBlog(ctx, req.(*DeleteBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_ListBlog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBlogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Blog_ServiceServer).ListBlog(m, &blog_ServiceListBlogServer{stream})
}

type Blog_Service_ListBlogServer interface {
	Send(*ListBlogRes) error
	grpc.ServerStream
}

type blog_ServiceListBlogServer struct {
	grpc.ServerStream
}

func (x *blog_ServiceListBlogServer) Send(m *ListBlogRes) error {
	return x.ServerStream.SendMsg(m)
}

// Blog_Service_ServiceDesc is the grpc.ServiceDesc for Blog_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blog_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.Blog_Service",
	HandlerType: (*Blog_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _Blog_Service_CreateBlog_Handler,
		},
		{
			MethodName: "CreateBlogs",
			Handler:    _Blog_Service_CreateBlogs_Handler,
		},
		{
			MethodName: "ReadBlog",
			Handler:    _Blog_Service_ReadBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _Blog_Service_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _Blog_Service_DeleteBlog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBlog",
			Handler:       _Blog_Service_ListBlog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/blog.proto",
}
